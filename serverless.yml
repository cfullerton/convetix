service: my-express-application
plugins:
  - serverless-offline
custom:
  tableName: 'tickets-table-${self:provider.stage}'
  bcs3: 'barcode-tickets-s3'
  eventsTable: 'events-table-${self:provider.stage}'
provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["ticketsDynamoDBTable", "Arn" ] }
    -  Effect: "Allow"
       Action:
         - "s3:ListBucket"
       Resource:
         Fn::Join:
           - ""
           - - "arn:aws:s3:::"
             - Ref: ServerlessDeploymentBucket
    -  Effect: "Allow"
       Action:
         - logs:CreateLogGroup
         - logs:CreateLogGroup
         - logs:CreateLogStream
         - logs:PutLogEvents
         - ses:SendEmail
         - ses:SendRawEmail
       Resource: "*"
    - Effect: "Allow"
      Action:
        - "SNS:Publish"
      Resource: "arn:aws:sns:us-east-1:112028903682:sendMail"

    -  Effect: "Allow"
       Action:
         - "s3:PutObject"
       Resource:
         Fn::Join:
           - ""
           - - "arn:aws:s3:::"
             - Ref: ServerlessDeploymentBucket
             - "/*"
  environment:
    TICKET_TABLE: ${self:custom.tableName}
    BC_S3: ${self:custom.bcs3}
    EVENT_TABLE: ${self:custom.eventsTable}
functions:
  createTicket:
    handler: createTickets.handler
    events:
      - http: 'GET /tickets/{proxy+}'
      - http: 'POST /tickets'
  createEvent:
    handler: createEvent.handler
    events:
      - http: 'POST /create-event'
  writeBarcode:
    handler: writeBarcode.handler
    events:
      - http: 'GET /write-barcode/'
  sendEmail:
    handler: sendEmail.handler
    events:
      - sns: sendMail
  charge:
    handler: charge.handler
    events:
      - http: 'POST /charge'
resources:
  Resources:
    ticketsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: ticketId
            AttributeType: S
        KeySchema:
          -
            AttributeName: ticketId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
    eventsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: eventId
            AttributeType: S
        KeySchema:
          -
            AttributeName: eventId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.eventsTable}
    barcodeS3:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${self:custom.bcs3}
